// src/pages/ProductPage.jsx
import React, { useState, useEffect } from "react";
import { useParams, Link } from "react-router-dom";
import { Button, message, notification, Spin } from "antd";
import { ShoppingCartOutlined, ArrowLeftOutlined } from "@ant-design/icons";
import Navbar from "../components/Navbar";
import { fetchProductById, fetchProductOffers, addToCart } from "../api";
import "./ProductPage.css";

const ProductPage = ({ user, onLogout }) => {
  const { id } = useParams();
  const [product, setProduct] = useState(null);
  const [loading, setLoading] = useState(true);
  const [api, contextHolder] = notification.useNotification();

  useEffect(() => {
    const loadProduct = async () => {
      try {
        const prod = await fetchProductById(id);
        const offers = await fetchProductOffers(id);
        setProduct({ ...prod, offers });
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞:", err);
        message.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä");
      } finally {
        setLoading(false);
      }
    };
    loadProduct();
  }, [id]);

  const handleAddToCart = async (offer) => {
    const token = localStorage.getItem("token");
    if (!token) {
      message.error("–ù—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç");
      return;
    }
    try {
      await addToCart(offer.offer_id, 1);
      api.success({
        message: "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω üõí",
        description: `${product.name} (${offer.store_name}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.`,
        placement: "bottomRight",
        icon: <ShoppingCartOutlined style={{ color: "#52c41a" }} />,
        duration: 3.5,
        btn: (
          <Link to="/cart">
            <Button type="primary" size="small">
              –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É
            </Button>
          </Link>
        ),
      });
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:", err);
      message.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É");
    }
  };

  if (loading) {
    return (
      <div>
        <Navbar user={user} onLogout={onLogout} />
        <div className="loading-container">
          <Spin size="large" />
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–∞...</p>
        </div>
      </div>
    );
  }

  if (!product) {
    return (
      <div>
        <Navbar user={user} onLogout={onLogout} />
        <p className="not-found">–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
      </div>
    );
  }

  return (
    <div>
      {contextHolder}
      <Navbar user={user} onLogout={onLogout} />
      <div className="page-wrapper">
        <div className="product-card">
          <div className="product-header">
            <div className="product-image">
              <img src={product.image} alt={product.name} />
            </div>
            <div className="info">
              <h1>{product.name}</h1>
              <p className="price">{product.price} ‚Ç∏</p>
            </div>
          </div>

          <div className="product-description">
            <h3>–û–ø–∏—Å–∞–Ω–∏–µ</h3>
            <p>{product.description || "–û–ø–∏—Å–∞–Ω–∏–µ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è..."}</p>
          </div>

          {product.youtube_link && (
            <div>
              <h3>–í–∏–¥–µ–æ–æ–±–∑–æ—Ä</h3>
              <div className="video-wrapper">
                <iframe
                  src={product.youtube_link.replace("watch?v=", "embed/")}
                  title="–í–∏–¥–µ–æ–æ–±–∑–æ—Ä"
                  allowFullScreen
                ></iframe>
              </div>
            </div>
          )}

          <h3 style={{ marginTop: "30px" }}>–¶–µ–Ω—ã –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö</h3>
          <div className="offers">
            <table>
              <thead>
                <tr>
                  <th>–ú–∞–≥–∞–∑–∏–Ω</th>
                  <th>–¶–µ–Ω–∞</th>
                  <th>–ù–∞–ª–∏—á–∏–µ</th>
                  <th></th>
                </tr>
              </thead>
              <tbody>
                {product.offers?.map((o) => (
                  <tr key={o.offer_id}>
                    <td>
                      <strong>{o.store_name}</strong>
                      {(o.address || o.phone) && (
                        <div className="offer-meta">
                          {o.address || ""} {o.phone ? ` ¬∑ ${o.phone}` : ""}
                        </div>
                      )}
                    </td>
                    <td>{o.price} ‚Ç∏</td>
                    <td>{o.stock > 0 ? "–í –Ω–∞–ª–∏—á–∏–∏" : "–ù–µ—Ç"}</td>
                    <td>
                      {o.stock > 0 && (
                        <Button
                          type="primary"
                          size="middle"
                          shape="round"
                          onClick={() => handleAddToCart(o)}
                          icon={<ShoppingCartOutlined />}
                        >
                          –í –∫–æ—Ä–∑–∏–Ω—É
                        </Button>
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          <Link
            to="/"
            className="back-link"
          >
            <ArrowLeftOutlined /> –ù–∞–∑–∞–¥
          </Link>
        </div>
      </div>
    </div>
  );
};

export default ProductPage;
